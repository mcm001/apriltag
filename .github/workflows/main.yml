# This workflow builds the client (UI), the server, builds the JAR.

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master ]

jobs:
   
  apriltag-build-host:
    env:
      MACOSX_DEPLOYMENT_TARGET: 10.14
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            artifact-name: Win64
          - os: macos-latest
            artifact-name: macOS
          - os: ubuntu-latest
            artifact-name: Linux

    runs-on: ${{ matrix.os }}
    name: "Libapriltag - Build - ${{ matrix.artifact-name }}"
    steps:
      - uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0

      - run: git fetch --tags --force
      - run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build

      # Upload client artifact.
      - uses: actions/upload-artifact@master
        with:
          name: apriltag-${{ matrix.artifact-name }}
          path: |
            build/*.so
            build/Debug/*.dll
            build/libapriltag.dylib

  apriltag-build-docker:
    strategy:
      fail-fast: false
      matrix:
        include:
          - container: wpilib/roborio-cross-ubuntu:2022-18.04
            artifact-name: Athena
          - container: wpilib/raspbian-cross-ubuntu:10-18.04
            artifact-name: Raspbian
          - container: wpilib/aarch64-cross-ubuntu:bionic-18.04
            artifact-name: Aarch64

    runs-on: ubuntu-latest
    container: ${{ matrix.container }}
    
    name: "Libapriltag - Build - ${{ matrix.artifact-name }}"
    steps:
      - uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0
      - run: git fetch --tags --force
      - run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build
        if: matrix.artifact-name != 'Raspbian'
      - run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="CMake/arm-pi-gnueabihf.toolchain.cmake"
          cmake --build build
        if: matrix.artifact-name == 'Raspbian'

      # Upload client artifact.
      - uses: actions/upload-artifact@master
        with:
          name: apriltag-${{ matrix.artifact-name }}
          path: build/libapriltag.so

  apriltag-release:
    needs: [apriltag-build-host, apriltag-build-docker]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
      
      - run: |
          find .
          
          ls -AbQR1p * |                        # paths in "quoted" \escaped format
          sed -n '/":$/,${/.[^/]$/p}' |     # skip files in pwd, blank and dir/ lines
          { bwd="$PWD"; while read -n1;     # save base dir strip leading "quote
                        read -r p; do   # read path
          printf -vs "${p%\"*}"         # strip trailing quote"(:)
          [[ $p == *: ]] && {           # this is a directory
                  cd   "$bwd/$s"            # change into new directory
                  rnp="${s//\//-}"-         # relative name prefix
              } || mv "$s" "$bwd/$rnp$s"
          done; }

      - run: |
          ls -AbQR1p * |                    # paths in "quoted" \escaped format
          sed -n '/":$/,${/.[^/]$/p}' |     # skip files in pwd, blank and dir/ lines
          { bwd="$PWD"; while read -n1;     # save base dir strip leading "quote
                              read -r p; do # read path
              printf -vs "${p%\"*}"         # strip trailing quote"(:)
              [[ $p == *: ]] && {           # this is a directory
                  cd   "$bwd/$s"            # change into new directory
                  rnp="${s//\//-}"-         # relative name prefix
              } || mv "$s" "$bwd/$rnp$s";       done; }

      - name: Release
        uses: softprops/action-gh-release@v1
        if: github.event_name == 'push'
        with:
          files: |
            **/*.dll
            **/*.so
            **/*.dylib
